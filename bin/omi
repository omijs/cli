#!/usr/bin/env node

'use strict'

var program = require('commander')
var join = require('path').join
var chalk = require('chalk')
var exists = require('fs-exists-sync')
var spawn = require('cross-spawn')

var options = {
  cmd: '',
  projectName: '',
  mirror: 'default',
  language: 'en'
}

program
  .version(require('../package').version, '-v, --version')
  .usage('<cmd> [project-name]')
  // .option('-m, --mirror <mirror>', 'Select mirror like: npm, cnpm, taobao', /^(npm|cnpm|taobao|nj|rednpm|skimdb|yarn)$/i)
  // .option('-l, --language <language>', 'Select language: en / cn', selectLanguage)
  .on('-h, --help', help)

program
  .command('init')
  .arguments('<projectName>')
  .description('Initialize a new omi application in the current folder')
  .action(function (projectName, option) {
    var cmd = 'init'
    switchCommand(cmd, {
      project: projectName,
      mirror: options.mirror,
      language: options.language
    })
  })

program
  .command('init-spa')
  .arguments('<projectName>')
  .description('Initialize a new omi application in the current folder')
  .action(function (projectName, option) {
    var cmd = 'init-spa'
    switchCommand(cmd, {
      project: projectName,
      mirror: options.mirror,
      language: options.language
    })
  })

program
  .command('init-js')
  .arguments('<projectName>')
  .description('Initialize a new omi application in the current folder')
  .action(function (projectName, option) {
    var cmd = 'init-js'
    switchCommand(cmd, {
      project: projectName,
      mirror: options.mirror,
      language: options.language
    })
  })

program
  .command('init-component')
  .arguments('<componentName>')
  .description('Initialize a new omi component in the current folder')
  .action(function (projectName, option) {
    var cmd = 'init-component'
    switchCommand(cmd, {
      project: projectName,
      mirror: options.mirror,
      language: options.language
    })
  })

program.command('*').action(function (cmd) {
  const templateName = isInitTemplate(cmd) // verify init-{templateName}
  const option = arguments[2] || arguments[1] // if no arguments[2], second parameter is an option.
  const projectName = typeof arguments[1] === 'string' ? arguments[1] : '' // if arguments[1] is not a string, no project name input.
  // init a template
  if (templateName) {
    var cmd = 'init-template'
    // omi init-{templateName} {projectName}
    switchCommand(cmd, {
      project: projectName,
      template: templateName,
      mirror: options.mirror,
      language: options.language
    })
  } else {
    // default, if it is not init a template
    spawn('omi', ['-h'], { stdio: 'inherit' })
  }
})

program.parse(process.argv)

function switchCommand(cmd, args) {
  if (cmd) {
    require('../lib/' + cmd)(args)
  } else {
    setTimeout(program.help, 0)
  }
}

function isCnFuc(language) {
  return language === 'cn' ? true : false
}

function selectLanguage(language) {
  if (language !== 'en' && language !== 'cn') {
    language = 'en'
  }
  options.language = language
  return language
}

// verify a command is init a template, and return a template name without init-
// i.e. init-omi-cli to omi-cli
function isInitTemplate(cmd) {
  return /init-(.)+/.test(cmd) && /init-([^\ ]+)/.exec(cmd)[1]
}

function executable(cmd) {
  var file = join(__dirname, 'omi-' + cmd)
  return exists(file) ? file : void 0
}

function help() {
  console.log('  Commands:')
  console.log()
  console.log(
    `     ${chalk.green('init  [project-name]')}           Initialize a new omi application with typescript in the current folder `
  )
  console.log(
    `     ${chalk.green('init-js  [project-name]')}     Initialize a new omi project with javascript in the current folder `
  )
  console.log(
    `     ${chalk.green('init-spa  [project-name]')}        Initialize a new omi single page application with typescript in the current folder `
  )
  console.log(
    `     ${chalk.green('init-component [ComponentName]')}      Initialize a new omi component in the current folder `
  )
  console.log()
  console.log(
    '  All commands can be run with -h (or --help) for more information.'
  )
}
